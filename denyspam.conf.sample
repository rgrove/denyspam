#
# denyspam.conf.sample - DenySpam sample configuration file.
#
# Syntax:
#   string:    '...' or "..."
#   integer:   5 or -5 (no quotes)
#   regexp:    /.../
#   hash:      { key => value, ... }
#   array:     [ value, ... ]
#   procedure: proc {|arglist| Ruby code }
#
# You guessed it: this file is Ruby, so you've gotta use Ruby syntax. But
# Ruby's a real friendly sort of language, so don't you worry. Just pay
# attention to the comments and you'll be fine.
#
# Credit where credit is due: the format of this file was inspired by that of
# pkgtools.conf, from the lovely pkgtools suite for FreeBSD (also written in
# Ruby).
#

module DenySpam; module Config # <-- don't remove this line

  # MAILLOG: string
  #
  # Path to your mail server log file.

  # MAILLOG = '/var/log/maillog'

  # HOSTDATA: string
  #
  # File DenySpam should use to store its host data.
  #
  # DenySpam will attempt to create the specified file and directory if they
  # don't already exist.

  # HOSTDATA = '/var/db/denyspam/hostdata'

  # BLOCK_COMMAND: string
  #
  # Command to run to block one or more IP addresses.

  # BLOCK_COMMAND = '/sbin/pfctl -t denyspam -T add :addresses > /dev/null 2>&1'
  
  # UNBLOCK_COMMAND: string
  #
  # Command to run to unblock one or more IP addresses.
  
  # UNBLOCK_COMMAND = '/sbin/pfctl -t denyspam -T delete :addresses > /dev/null 2>&1'

  # FLUSH_COMMAND: string
  #
  # Command to run to flush the firewall's table of blocked addresses.
  
  # FLUSH_COMMAND = '/sbin/pfctl -t denyspam -T flush > /dev/null 2>&1'
  
  # BLOCK_MINUTES: integer
  #
  # Number of minutes to block a spamming host for each positive point in its
  # cumulative score.
  #
  # A spammer with a cumulative score of 5 will be blocked for an amount of
  # time equal to BLOCK_MINUTES * 5. If BLOCK_MINUTES is 30, then the spammer
  # will be blocked for 150 minutes.

  # BLOCK_MINUTES = 30

  # DEFAULT_SCORE: integer
  #
  # Score assigned to each host the first time it is seen, before rules are
  # applied. After applying rules, any host with a score greater than 0 will be
  # considered a spammer.

  # DEFAULT_SCORE = -10

  # RULES: hash
  #
  # Regexp-based rules to apply to each new mail log entry.
  #
  # This is a hash of arrays, each array containing one or more regular
  # expressions. Each expression will be evaluated against the descriptive
  # portion of a mail log entry (the portion beginning after the process id and
  # continuing to the end of the line).
  #
  # The keys of the hash should be integers (either positive or negative)
  # representing the score to be applied if an expression matches the log entry
  # being tested. A positive score indicates bad (spammer-like) behavior, while
  # a negative score indicates good behavior.
  #
  # See the FAQ at http://wonko.com/software/denyspam/faq/ for more details.
  #
  # Example:
  #

  RULES = {
    3 => [
      /^NOQUEUE: reject: .+?: 554 5\.7\.1 Service unavailable/,  # RBL hit
    ],
    
    2 => [
      /^NOQUEUE: reject: .+?: 550 5\.1\.1/,  # Uknown recipient
      /^NOQUEUE: reject: .+?: 501 5\.5\.2/,  # Invalid name during HELO
    ],
    
    1 => [
      /^(?:lost connection|timeout) after CONNECT /,
      /^timeout after DATA /,
      /^warning: .+?: hostname .+? verification failed/,
    ],
    
    -1 => [
      /^[0-9A-Z]{9}: client=/,
    ],
  }

  # ADVANCED_RULES: hash
  #
  # Ruby procedures to run for each new mail log entry.
  #
  # The format of this hash is the same as the RULES hash, except that each
  # hash entry should contain an array of Ruby procedures rather than regular
  # expressions. Each procedure should accept two arguments: a Host object
  # representing the remote mail server and a string containing the log entry
  # being evaluated.
  #
  # If the return value of a procedure evaluates as true, the rule is
  # considered a match and points are assigned. Otherwise, no action is taken.
  #
  # By the way, the DenySpam::Util module contains some methods that you may
  # find useful in writing advanced rules. Consult the documentation for more
  # details.
  #
  # Example:
  #

  ADVANCED_RULES = {
    2 => [
      proc {|host, message|
        host.times_seen == 1 && DenySpam::Util::RBL.spamcop?(host.ip)
      },
    ],
  }

end; end # <-- don't remove this line
